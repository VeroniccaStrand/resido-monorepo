// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: resido.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "resido";

export interface CreateTenantRequest {
  name: string;
  contactEmail: string;
}

export interface TenantIdRequest {
  id: string;
}

export interface GetTenantByIdRequest {
  id: string;
}

export interface GetTenantBySchemaNameRequest {
  schemaName: string;
}

export interface GetAllTenantsRequest {
}

export interface UpdateContactInfoRequest {
  id: string;
  contactEmail: string;
  contactPhone: string;
}

export interface TenantResponse {
  id: string;
  name: string;
  schemaName: string;
  contactEmail: string;
  contactPhone: string;
  isActive: boolean;
  createdAt: string;
  updatedAt: string;
  activationToken: string;
}

export interface TenantsResponse {
  tenants: TenantResponse[];
}

export interface RegisterWithTokenRequest {
  activationToken: string;
  email: string;
  firstName: string;
  lastName: string;
  password: string;
  phone: string;
}

export interface CreateUserRequest {
  email: string;
  firstName: string;
  lastName: string;
  password: string;
  phone: string;
  schemaName: string;
}

export interface UserIdRequest {
  id: string;
}

export interface UpdateUserInfoRequest {
  id: string;
  firstName: string;
  lastName: string;
  phone: string;
}

export interface ChangePasswordRequest {
  id: string;
  currentPassword: string;
  newPassword: string;
}

export interface UserResponse {
  id: string;
  email: string;
  firstName: string;
  lastName: string;
  phone: string;
  isActive: boolean;
  createdAt: string;
  updatedAt: string;
}

export interface Empty {
}

export interface CreateTokenRequest {
  schemaName: string;
  email: string;
}

export interface TokenResponse {
  token: string;
  expiresAt: string;
}

export interface ValidateTokenRequest {
  token: string;
}

export interface TokenValidationResponse {
  valid: boolean;
  schemaName: string;
  email: string;
  tokenType: string;
}

export interface UseTokenRequest {
  token: string;
}

export interface UseTokenResponse {
  success: boolean;
}

export interface GetSchemaByEmailRequest {
  email: string;
}

export interface UserTenantMapperResponse {
  schemaName: string;
}

export const RESIDO_PACKAGE_NAME = "resido";

export interface TenantServiceClient {
  createTenant(request: CreateTenantRequest): Observable<TenantResponse>;

  getTenantById(request: GetTenantByIdRequest): Observable<TenantResponse>;

  getTenantBySchemaName(request: GetTenantBySchemaNameRequest): Observable<TenantResponse>;

  getAllTenants(request: GetAllTenantsRequest): Observable<TenantsResponse>;

  activateTenant(request: TenantIdRequest): Observable<TenantResponse>;

  deactivateTenant(request: TenantIdRequest): Observable<TenantResponse>;

  updateContactInfo(request: UpdateContactInfoRequest): Observable<TenantResponse>;
}

export interface TenantServiceController {
  createTenant(request: CreateTenantRequest): Promise<TenantResponse> | Observable<TenantResponse> | TenantResponse;

  getTenantById(request: GetTenantByIdRequest): Promise<TenantResponse> | Observable<TenantResponse> | TenantResponse;

  getTenantBySchemaName(
    request: GetTenantBySchemaNameRequest,
  ): Promise<TenantResponse> | Observable<TenantResponse> | TenantResponse;

  getAllTenants(
    request: GetAllTenantsRequest,
  ): Promise<TenantsResponse> | Observable<TenantsResponse> | TenantsResponse;

  activateTenant(request: TenantIdRequest): Promise<TenantResponse> | Observable<TenantResponse> | TenantResponse;

  deactivateTenant(request: TenantIdRequest): Promise<TenantResponse> | Observable<TenantResponse> | TenantResponse;

  updateContactInfo(
    request: UpdateContactInfoRequest,
  ): Promise<TenantResponse> | Observable<TenantResponse> | TenantResponse;
}

export function TenantServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createTenant",
      "getTenantById",
      "getTenantBySchemaName",
      "getAllTenants",
      "activateTenant",
      "deactivateTenant",
      "updateContactInfo",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("TenantService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("TenantService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const TENANT_SERVICE_NAME = "TenantService";

export interface UserServiceClient {
  createUser(request: CreateUserRequest): Observable<UserResponse>;

  getUserById(request: UserIdRequest): Observable<UserResponse>;

  updateUserInfo(request: UpdateUserInfoRequest): Observable<UserResponse>;

  changePassword(request: ChangePasswordRequest): Observable<Empty>;

  activateUser(request: UserIdRequest): Observable<UserResponse>;

  deactivateUser(request: UserIdRequest): Observable<UserResponse>;

  recordUserLogin(request: UserIdRequest): Observable<UserResponse>;

  registerWithToken(request: RegisterWithTokenRequest): Observable<UserResponse>;
}

export interface UserServiceController {
  createUser(request: CreateUserRequest): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  getUserById(request: UserIdRequest): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  updateUserInfo(request: UpdateUserInfoRequest): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  changePassword(request: ChangePasswordRequest): Promise<Empty> | Observable<Empty> | Empty;

  activateUser(request: UserIdRequest): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  deactivateUser(request: UserIdRequest): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  recordUserLogin(request: UserIdRequest): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  registerWithToken(request: RegisterWithTokenRequest): Promise<UserResponse> | Observable<UserResponse> | UserResponse;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createUser",
      "getUserById",
      "updateUserInfo",
      "changePassword",
      "activateUser",
      "deactivateUser",
      "recordUserLogin",
      "registerWithToken",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";

export interface TokenServiceClient {
  createUserToken(request: CreateTokenRequest): Observable<TokenResponse>;

  validateToken(request: ValidateTokenRequest): Observable<TokenValidationResponse>;

  useToken(request: UseTokenRequest): Observable<UseTokenResponse>;
}

export interface TokenServiceController {
  createUserToken(request: CreateTokenRequest): Promise<TokenResponse> | Observable<TokenResponse> | TokenResponse;

  validateToken(
    request: ValidateTokenRequest,
  ): Promise<TokenValidationResponse> | Observable<TokenValidationResponse> | TokenValidationResponse;

  useToken(request: UseTokenRequest): Promise<UseTokenResponse> | Observable<UseTokenResponse> | UseTokenResponse;
}

export function TokenServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createUserToken", "validateToken", "useToken"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("TokenService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("TokenService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const TOKEN_SERVICE_NAME = "TokenService";

export interface UserTenantMapperServiceClient {
  getSchemaByEmail(request: GetSchemaByEmailRequest): Observable<UserTenantMapperResponse>;
}

export interface UserTenantMapperServiceController {
  getSchemaByEmail(
    request: GetSchemaByEmailRequest,
  ): Promise<UserTenantMapperResponse> | Observable<UserTenantMapperResponse> | UserTenantMapperResponse;
}

export function UserTenantMapperServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getSchemaByEmail"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserTenantMapperService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserTenantMapperService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_TENANT_MAPPER_SERVICE_NAME = "UserTenantMapperService";
